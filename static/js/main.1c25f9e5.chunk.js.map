{"version":3,"sources":["components/Game.module.scss","components/Card.module.scss","cards/Card.ts","components/Game.tsx","cards/Deck.ts","components/Card.tsx","components/Sandbox.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/Sandbox.module.scss","App.module.scss"],"names":["module","exports","CardValue","CardSuit","BetType","Card","value","suit","name","this","valueName","Clubs","Spades","Hearts","Diamonds","Error","String","fromCodePoint","unicodeNumber","unicodeSuitNumber","unicodeValueNumber","Deck","_cards","reset","flatMap","map","range","Ace","King","tmp","length","randIndex","Math","floor","random","push","splice","pop","CardElem","card","faceDown","className","showBack","rootClassName","styles","root","style","color","outer","inner","unicode","BET_CARDS","chunk","cards","Game","useRef","row","money","deckContainer","deck","bet","type","min","max","red","betChoices","selected","cardListContainer","cardContainer","title","BetChoice","children","liProps","classNames","black","join","Sandbox","useState","setChangeTimes","selectedCard","setSelectedCard","drawnCard","setDrawnCard","setFaceDown","shuffle","useCallback","current","s","draw","toggleFaceDown","f","onClick","activeCards","cardList","i","Fragment","App","route","setRoute","app","header","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c25f9e5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Game_root__LNrW-\",\"row\":\"Game_row__19pce\",\"deckContainer\":\"Game_deckContainer__uAEAW\",\"bet\":\"Game_bet__3essC\",\"money\":\"Game_money__2AYMs\",\"deck\":\"Game_deck__Bkop7\",\"betChoices\":\"Game_betChoices__2mGSU\",\"selected\":\"Game_selected__2SLgu\",\"red\":\"Game_red__3UvOq\",\"black\":\"Game_black__1ueTL\",\"cardListContainer\":\"Game_cardListContainer__2C15T\",\"cardContainer\":\"Game_cardContainer__2-6tD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Card_root__2RwBt\",\"outer\":\"Card_outer__masXS\",\"inner\":\"Card_inner__1XZwa\"};","\r\nexport enum CardValue {\r\n    Ace = 1,\r\n    Two = 2,\r\n    Three = 3,\r\n    Four = 4,\r\n    Five = 5,\r\n    Six = 6,\r\n    Seven = 7,\r\n    Eight = 8,\r\n    Nine = 9,\r\n    Ten = 10,\r\n    Jack = 11,\r\n    Queen = 12,\r\n    King = 13,\r\n};\r\n\r\nexport enum CardSuit {\r\n    Clubs = 'Clubs',\r\n    Diamonds = 'Diamonds',\r\n    Hearts = 'Hearts',\r\n    Spades = 'Spades',\r\n}\r\n\r\nexport type SuitColor = 'red' | 'black';\r\n\r\nexport class Card {\r\n\r\n    readonly value: CardValue;\r\n    readonly suit: CardSuit;\r\n    readonly name: string;\r\n\r\n    get valueName(): string { return CardValue[this.value]; };\r\n    get suitName(): string { return this.suit; };\r\n    get color(): SuitColor {\r\n        switch (this.suit) {\r\n            case CardSuit.Clubs:\r\n            case CardSuit.Spades:\r\n                return 'black';\r\n            case CardSuit.Hearts:\r\n            case CardSuit.Diamonds:\r\n                return 'red';\r\n            default:\r\n                throw new Error('Invalid suit: ' + this.suit);\r\n        }\r\n    };\r\n    /** returns the unicode card block character, see https://en.wikipedia.org/wiki/Playing_cards_in_Unicode */\r\n    get unicode(): string {\r\n        return String.fromCodePoint(this.unicodeNumber);\r\n    }\r\n\r\n    get unicodeNumber(): number {\r\n        return 0x1F000 + this.unicodeSuitNumber + this.unicodeValueNumber;\r\n    }\r\n\r\n    get unicodeSuitNumber(): number {\r\n        switch (this.suit) {\r\n            case CardSuit.Spades:\r\n                return 0xA0;\r\n            case CardSuit.Hearts:\r\n                return 0xB0;\r\n            case CardSuit.Diamonds:\r\n                return 0xC0;\r\n            case CardSuit.Clubs:\r\n                return 0xD0;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    get unicodeValueNumber(): number {\r\n        // 0x1F0xC is a Knight, which we don't use\r\n        return this.value > 0xB ? this.value + 1 : this.value;\r\n    }\r\n\r\n    constructor(value: CardValue, suit: CardSuit) {\r\n        this.value = value;\r\n        this.suit = suit;\r\n        this.name = `${this.valueName} of ${this.suit}`;\r\n    }\r\n}\r\n","import { chunk } from 'lodash';\r\nimport React, { ReactNode, useRef } from 'react';\r\nimport { Card } from '../cards/Card';\r\nimport { Deck } from '../cards/Deck';\r\nimport { CardElem } from './Card';\r\nimport styles from './Game.module.scss';\r\n\r\n\r\nenum BetType {\r\n    Color,\r\n    Suit,\r\n    Value,\r\n    Card,\r\n}\r\n\r\n/** Four rows of cards, one per suit. Readonly since it's just a reference for the BetChoice cards */\r\nconst BET_CARDS: Readonly<Readonly<Card[]>[]> = chunk(new Deck().cards, 13);\r\n\r\nexport const Game = (): JSX.Element => {\r\n\r\n    const deck = useRef(new Deck());\r\n\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            <h2>Card Counting Gambler Game</h2>\r\n            <p>\r\n                In this game, you have a deck of cards, which you can draw from, one card at a time.\r\n                Each draw, you will bet on the outcome, by either color, suit, value, or card itself.\r\n            </p>\r\n            <p>\r\n                Each type of bet has different odds. The odds are in favor of the house, as usual.\r\n                However, if you remember what you've seen, you can increase your odds by knowing what\r\n                cards are left. Good luck!\r\n            </p>\r\n            <div className={styles.row}>\r\n                <div>\r\n                    <h3>Your Money</h3>\r\n                    <div className={styles.money}>$100</div>\r\n                </div>\r\n                <div className={styles.deckContainer}>\r\n                    Click to draw\r\n                    <div className={styles.deck}>\r\n                        <CardElem card={null} faceDown={true} />\r\n                    </div>\r\n                    Cards left: 52\r\n                </div>\r\n            </div>\r\n            <div className={styles.row}>\r\n                <div className={styles.bet}>\r\n                    <div className={styles.row}>\r\n                        <div>\r\n                            Bet Amount:&nbsp;\r\n                            <input type=\"number\" name=\"bet-amount\" value={10} min=\"1\" max=\"1000\" />\r\n                        </div>\r\n                        <div>\r\n                            You're betting&nbsp;\r\n                            <span>\r\n                                $10 on\r\n                                <span className={styles.red}> {'\\u2665'} Hearts</span>\r\n                            </span>\r\n                            <div>Win gains $30</div>\r\n                        </div>\r\n                    </div>\r\n                    <ul className={`${styles.row} ${styles.betChoices}`}>\r\n                        <BetChoice color={'red'}>Red</BetChoice>\r\n                        <BetChoice color={'black'}>Black</BetChoice>\r\n                    </ul>\r\n                    <ul className={`${styles.row} ${styles.betChoices}`}>\r\n                        <BetChoice color={'black'}>{'\\u2660'}</BetChoice>\r\n                        <BetChoice color={'red'} selected={true}>{'\\u2665'}</BetChoice>\r\n                        <BetChoice color={'red'}>{'\\u2666'}</BetChoice>\r\n                        <BetChoice color={'black'}>{'\\u2663'}</BetChoice>\r\n                    </ul>\r\n                    <ul className={`${styles.row} ${styles.betChoices}`}>\r\n                        <BetChoice>Ace</BetChoice>\r\n                        <BetChoice>Two</BetChoice>\r\n                        <BetChoice>Three</BetChoice>\r\n                        <BetChoice>Four</BetChoice>\r\n                        <BetChoice>Five</BetChoice>\r\n                        <BetChoice>Six</BetChoice>\r\n                        <BetChoice>Seven</BetChoice>\r\n                        <BetChoice>Eight</BetChoice>\r\n                        <BetChoice>Nine</BetChoice>\r\n                        <BetChoice>Ten</BetChoice>\r\n                        <BetChoice>Jack</BetChoice>\r\n                        <BetChoice>Queen</BetChoice>\r\n                        <BetChoice>King</BetChoice>\r\n                    </ul>\r\n                    {BET_CARDS.map(row => (\r\n                        <ul className={`${styles.row} ${styles.betChoices} ${styles.cardListContainer}`}>\r\n                            {row.map(card => (\r\n                                <BetChoice\r\n                                    key={card.unicodeNumber}\r\n                                    className={styles.cardContainer}\r\n                                    title={card.name}\r\n                                    color={card.color}\r\n                                >\r\n                                    <CardElem card={card} />\r\n                                </BetChoice>\r\n                            ))}\r\n                        </ul>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface IBetChoiceProps extends React.LiHTMLAttributes<HTMLLIElement> {\r\n    children: ReactNode;\r\n    color?: 'red' | 'black';\r\n    selected?: boolean;\r\n    //onSelect: (value: string) => void;\r\n}\r\n\r\nconst BetChoice = ({ color, selected, children, className, ...liProps }: IBetChoiceProps): JSX.Element => {\r\n    const classNames: string[] = [];\r\n    if (className)\r\n        classNames.push(className);\r\n    if (color) {\r\n        classNames.push(color === 'red' ? styles.red : styles.black);\r\n    }\r\n    if (selected) {\r\n        classNames.push(styles.selected);\r\n    }\r\n    return (\r\n        <li className={classNames.join(' ')} {...liProps}>\r\n            {children}\r\n        </li>\r\n    )\r\n}","import { flatMap, range } from 'lodash';\r\nimport { Card, CardSuit, CardValue } from './Card';\r\n\r\n/** holds an array of cards, which can be shuffled, and cards can be drawn (removed) one at a time. */\r\nexport class Deck {\r\n\r\n    private _cards: Card[] = [];\r\n\r\n    get cards(): Card[] { return this._cards };\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    reset(): void {\r\n        this._cards = flatMap(\r\n            [CardSuit.Spades, CardSuit.Hearts, CardSuit.Diamonds, CardSuit.Clubs]\r\n                .map(suit => range(CardValue.Ace, CardValue.King + 1) // a number enum so we can use it like numbers\r\n                    .map((value: CardValue) => new Card(value, suit)))\r\n        );\r\n    }\r\n\r\n    shuffle(): void {\r\n        let tmp = [...this._cards];\r\n        this._cards = [];\r\n        while (tmp.length > 0) {\r\n            const randIndex = Math.floor(Math.random() * (tmp.length));\r\n            this._cards.push(tmp[randIndex]);\r\n            tmp.splice(randIndex, 1);\r\n        }\r\n    }\r\n\r\n    /** draws a card, as in removes and returns it from the top of the deck */\r\n    draw(): Card | null {\r\n        return this._cards.pop() || null;\r\n    }\r\n}","import React from 'react';\r\nimport { Card } from '../cards/Card';\r\nimport styles from './Card.module.scss';\r\n\r\nexport interface ICardProps {\r\n    /** if null, will only show the back of a card. */\r\n    card: Card | null;\r\n    faceDown?: boolean;\r\n    className?: string;\r\n}\r\n\r\nexport const CardElem = ({ card, faceDown, className }: ICardProps): JSX.Element => {\r\n    const showBack = !card || faceDown;\r\n    const rootClassName = styles.root + ` ${className || ''}`;\r\n    return (\r\n        <span className={rootClassName} style={{ color: showBack ? 'darkred' : card?.color }}>\r\n            <span className={styles.outer}>\r\n                <span className={styles.inner}>{showBack ? '\\u{1F0A0}' : card?.unicode}</span>\r\n            </span>\r\n        </span>\r\n    );\r\n}","import React, { useCallback, useRef, useState } from 'react';\r\nimport { Card } from '../cards/Card';\r\nimport { Deck } from '../cards/Deck';\r\nimport { CardElem } from './Card';\r\nimport styles from './Sandbox.module.scss';\r\n\r\n\r\nexport const Sandbox = (): JSX.Element => {\r\n    const deck = useRef(new Deck());\r\n    const [changeTimes, setChangeTimes] = useState(0); // forces re-render for when deck changes\r\n    const [selectedCard, setSelectedCard] = useState<Card | null>(null);\r\n    const [drawnCard, setDrawnCard] = useState<Card | null>(null);\r\n\r\n    const [faceDown, setFaceDown] = useState(true);\r\n\r\n    const shuffle = useCallback(() => {\r\n        deck.current.shuffle();\r\n        setChangeTimes(s => s + 1);\r\n        setSelectedCard(null);\r\n    }, []);\r\n    const reset = useCallback(() => {\r\n        deck.current.reset();\r\n        setChangeTimes(s => s + 1);\r\n        setSelectedCard(null);\r\n        setDrawnCard(null);\r\n    }, []);\r\n    const draw = useCallback(() => {\r\n        setDrawnCard(deck.current.draw());\r\n    }, []);\r\n    const toggleFaceDown = useCallback(() => {\r\n        setFaceDown(f => !f);\r\n    }, []);\r\n    return (\r\n        <div className={styles.root}>\r\n            <h2>Here is a deck of cards.</h2>\r\n            <div>\r\n                <button onClick={reset}>Reset</button>\r\n                <button onClick={shuffle}>Shuffle</button>\r\n                <button onClick={toggleFaceDown}>{faceDown ? 'Reveal' : 'Hide'}</button>\r\n                <button onClick={draw}>Draw Card</button>\r\n            </div>\r\n            <p className={styles.activeCards}>\r\n                {drawnCard && (\r\n                    <div>\r\n                        <div>Drawn card:</div>\r\n                        <div className={styles.drawnCard}><CardElem card={drawnCard} /></div>\r\n                        <div>{drawnCard.name}</div>\r\n                    </div>\r\n                )}\r\n                {selectedCard && (\r\n\r\n                    <div>\r\n                        <div>Selected card:</div>\r\n                        <div className={styles.drawnCard}><CardElem card={selectedCard} /></div>\r\n                        <div>{selectedCard.name}</div>\r\n                    </div>\r\n                )}\r\n            </p>\r\n            <div>\r\n\r\n                <ul className={styles.cardList}>\r\n                    {deck.current.cards.map((card, i) => (\r\n                        <React.Fragment key={card.unicodeNumber}>\r\n                            <li\r\n                                className={styles.card + (card.unicodeNumber === selectedCard?.unicodeNumber ? ' ' + styles.selected : '')}\r\n                                key={card.name}\r\n                                onClick={() => setSelectedCard(card)}\r\n                            >\r\n                                <CardElem card={card} faceDown={faceDown} />\r\n                            </li>\r\n                            {i % 13 === 12 && <br />}\r\n                        </React.Fragment>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport styles from './App.module.scss';\r\nimport { Game } from './components/Game';\r\nimport { Sandbox } from './components/Sandbox';\r\n\r\n\r\ntype Route = 'Sandbox' | 'Game';\r\n\r\nfunction App() {\r\n\r\n  // quick and dirty routing; TODO replace with react router\r\n  const [route, setRoute] = useState<Route>('Game');\r\n\r\n  return (\r\n    <div className={styles.app}>\r\n      <header className={styles.header}>\r\n        <h1>Deck of Cards</h1>\r\n        <nav>\r\n          <ul>\r\n            <li className={route === 'Game' ? styles.selected : ''} onClick={() => setRoute('Game')}>\r\n              Game\r\n            </li>\r\n            <li className={route === 'Sandbox' ? styles.selected : ''} onClick={() => setRoute('Sandbox')}>\r\n              Sandbox\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </header>\r\n      {route === 'Sandbox'\r\n        ? (\r\n          <Sandbox />\r\n        ) : (\r\n          <Game />\r\n        )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Sandbox_root__1eZHL\",\"activeCards\":\"Sandbox_activeCards__EciTs\",\"drawnCard\":\"Sandbox_drawnCard__3Rkz6\",\"cardList\":\"Sandbox_cardList__1Q0kn\",\"card\":\"Sandbox_card__1r7nm\",\"selected\":\"Sandbox_selected__2RGjd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3sAhJ\",\"App-logo\":\"App_App-logo__3bIKc\",\"App-logo-spin\":\"App_App-logo-spin__1GIMs\",\"header\":\"App_header__oPzZE\",\"selected\":\"App_selected__2TWnP\"};"],"sourceRoot":""}